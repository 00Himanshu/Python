{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPkIJHUcPGV4lwMTIQWJJbj"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"q69IPOq0sEHr","executionInfo":{"status":"ok","timestamp":1698827244217,"user_tz":-330,"elapsed":6147,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"0ef92916-3533-4175-9db0-2640abb46507"},"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the number you want to check : 23\n","Number isn't divisible 2 or 3\n"]}],"source":["#WAP to check a number Divisible by Either 2 or 3.\n","ui=int(input(\"Enter the number you want to check : \"))\n","if ui%2==0 or ui%3==0:\n","    print(\"Number is divisible by 2 or 3\")\n","else:\n","    print(\"Number isn't divisible 2 or 3\")"]},{"cell_type":"code","source":["#Create a program for a library that calculates late fees for overdue books based on the number of days they're overdue.\n","ui=int(input(\"enter the number of day : \"))\n","#Book should be return in 20 day\n","BR=20\n","if ui>=20:\n","  fine=(ui-BR)*5\n","  print(f\"Your total fine is {fine}\")\n","else:\n","  print(\"NO fine\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zO6zFxThsK2Z","executionInfo":{"status":"ok","timestamp":1698825953744,"user_tz":-330,"elapsed":11160,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"da1a1ba0-ecf6-45b2-98fd-71bf656ad625"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["enter the number of day : 34\n","Your total fine is 70\n"]}]},{"cell_type":"code","source":["#Implement a simple login system that prompts the user for a username and password. If the username and password match predefined values, grant access; otherwise, deny access.\n","username=input(\"Enter you username : \")\n","password=input(\"Enter you Password : \")\n","\n","if username==\"himanshu\" and password==\"Himanshu@123\":\n","  print(\"Access Granted\")\n","else:\n","  print(\"Access Denied\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"n3QYiQZOsQu8","executionInfo":{"status":"ok","timestamp":1698825965652,"user_tz":-330,"elapsed":11943,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"e138791b-0e10-42cb-88fc-810e64455227"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter you username : himanshu\n","Enter you Password : Himanshu@123\n","Access Granted\n"]}]},{"cell_type":"code","source":["#Create a ticket pricing system for a cinema where the price depends on factors like age, time of day, and movie type (e.g., regular, 3D, IMAX).\n","age = int(input(\"Enter your age: \"))\n","movie = input(\"Enter the movie type (regular, 3D, IMAX): \")\n","time_of_day = input(\"Enter the time of day (morning, afternoon, evening, night): \")\n","\n","if (age >= 55 or age <= 15) and movie == \"regular\":\n","    price = 350\n","    if time_of_day == \"morning\":\n","        price = 350\n","    elif time_of_day == \"afternoon\":\n","        price += 50\n","    elif time_of_day == \"evening\":\n","        price += 100\n","    elif time_of_day == \"night\":\n","        price += 150\n","elif (age >= 55 or age <= 15) and movie == \"3D\":\n","    price = 450\n","    if time_of_day == \"morning\":\n","        price = 450\n","    elif time_of_day == \"afternoon\":\n","        price += 50\n","    elif time_of_day == \"evening\":\n","        price += 100\n","    elif time_of_day == \"night\":\n","        price += 100\n","elif (age >= 55 or age <= 15) and movie == \"IMAX\":\n","    price = 550\n","    if time_of_day == \"morning\":\n","        price = 550\n","    elif time_of_day == \"afternoon\":\n","        price += 50\n","    elif time_of_day == \"evening\":\n","        price += 100\n","    elif time_of_day == \"night\":\n","        price += 150\n","elif 15 < age <= 50 and movie == \"regular\":\n","    price = 400\n","    if time_of_day == \"morning\":\n","        price = 400\n","    elif time_of_day == \"afternoon\":\n","        price += 50\n","    elif time_of_day == \"evening\":\n","        price += 100\n","    elif time_of_day == \"night\":\n","        price += 150\n","elif 15 < age <= 50 and movie == \"3D\":\n","    price = 500\n","    if time_of_day == \"morning\":\n","        price = 500\n","    elif time_of_day == \"afternoon\":\n","        price += 50\n","    elif time_of_day == \"evening\":\n","        price += 100\n","    elif time_of_day == \"night\":\n","        price += 150\n","elif 15 < age <= 50 and movie == \"IMAX\":\n","    price = 600\n","    if time_of_day == \"morning\":\n","        price = 600\n","    elif time_of_day == \"afternoon\":\n","        price += 50\n","    elif time_of_day == \"evening\":\n","        price += 100\n","    elif time_of_day == \"night\":\n","        price += 150\n","else:\n","    print(\"Invalid input. Please enter a valid age, movie type, and time of day.\")\n","\n","print(f\"The price for your ticket: {price}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QO8HDD7xsWwe","executionInfo":{"status":"ok","timestamp":1698825988385,"user_tz":-330,"elapsed":22750,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"c69a488c-3a7e-418a-f877-2efb0cfcb33a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter your age: 21\n","Enter the movie type (regular, 3D, IMAX): IMAX\n","Enter the time of day (morning, afternoon, evening, night): night\n","The price for your ticket: 750\n"]}]},{"cell_type":"code","source":["#Write a program that takes three numbers as input and returns them in ascending order.Accept the three sides of a triangle and print it is an equilateral, isosceles or scalene triangle.\n","def main():\n","  a=int(input(\"Enter first Number: \"))\n","  b=int(input(\"Enter Second Number: \"))\n","  c=int(input(\"Enter Second Number: \"))\n","  d=shorted(a, b, c)\n","  print(d)\n","\n","def shorted(num1, num2, num3):\n","  number=[num1, num2,num3]\n","  number.sort()\n","  return number\n","main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UqfzU3ha4Unw","executionInfo":{"status":"ok","timestamp":1698826005833,"user_tz":-330,"elapsed":17465,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"a541adc7-9dea-4026-f951-a8f73283b51b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter first Number: 32\n","Enter Second Number: 87\n","Enter Second Number: 12\n","[12, 32, 87]\n"]}]},{"cell_type":"code","source":["#Accept the three sides of a triangle and print it is an equilateral, isosceles or scalene triangle\n","def main():\n","    a = int(input(\"Enter first side of triangle: \"))\n","    b = int(input(\"Enter Second side of triangle: \"))\n","    c = int(input(\"Enter Third side of triangle: \"))\n","\n","    check_triangle_type(a, b, c)\n","\n","def check_triangle_type(a, b, c):\n","    if a == b == c:\n","        print(\"It is an equilateral triangle.\")\n","    elif a == b or b == c or a == c:\n","        print(\"It is an isosceles triangle.\")\n","    else:\n","        print(\"It is a scalene triangle.\")\n","\n","main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"woiWrnsW4zaN","executionInfo":{"status":"ok","timestamp":1698826019236,"user_tz":-330,"elapsed":13417,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"c7f881e5-2ffc-47bf-d78c-9687e60feb8c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter first side of triangle: 45\n","Enter Second side of triangle: 67\n","Enter Third side of triangle: 23\n","It is a scalene triangle.\n"]}]},{"cell_type":"code","source":["#Write a python program to print the sum of two matrices.\n","matrix1 = [\n","    [2, 3, 4, 5],\n","    [7, 3, 5, 3],\n","    [2, 9, 8, 4],\n","    [3, 4, 2, 5]\n","]\n","\n","matrix2 = [\n","    [6, 3, 7, 2],\n","    [3, 5, 6, 1],\n","    [9, 8, 7, 5],\n","    [3, 5, 2, 6]\n","]\n","\n","#Calculate the number of rows and columns in the original matrix\n","matrix = [[0 for _ in range(len(matrix1[0]))] for _ in range(len(matrix1))]\n","\n","\n","for i in range(len(matrix1)):\n","  for j in range(len(matrix1[0])):\n","    matrix[i][j] = matrix1[i][j] + matrix2[i][j]\n","\n","\n","for row in matrix:\n","    print(row)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lAPhtQ4G6FgU","executionInfo":{"status":"ok","timestamp":1698826019237,"user_tz":-330,"elapsed":19,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"2b271692-2ca6-4051-9917-ab5fe35e5482"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[8, 6, 11, 7]\n","[10, 8, 11, 4]\n","[11, 17, 15, 9]\n","[6, 9, 4, 11]\n"]}]},{"cell_type":"code","source":["#Write a python program to print the difference of two matrices\n","matrix1 = [\n","    [2, 3, 4, 5],\n","    [7, 3, 5, 3],\n","    [2, 9, 8, 4],\n","    [3, 4, 2, 5]\n","]\n","\n","matrix2 = [\n","    [6, 3, 7, 2],\n","    [3, 5, 6, 1],\n","    [9, 8, 7, 5],\n","    [3, 5, 2, 6]\n","]\n","\n","\n","matrix = [[0 for _ in range(len(matrix1[0]))] for _ in range(len(matrix1))]\n","\n","\n","for i in range(len(matrix1)):\n","  for j in range(len(matrix1[0])):\n","    matrix[i][j] = matrix1[i][j] - matrix2[i][j]\n","\n","\n","for row in matrix:\n","    print(row)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kLZax74S6K2v","executionInfo":{"status":"ok","timestamp":1698826019238,"user_tz":-330,"elapsed":17,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"65f34347-a2ea-459e-ff83-092bd231ced1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[-4, 0, -3, 3]\n","[4, -2, -1, 2]\n","[-7, 1, 1, -1]\n","[0, -1, 0, -1]\n"]}]},{"cell_type":"code","source":["#Write a python program to print the transpose of a matrix\n","matrix1 = [\n","    [2, 3, 4, 5],\n","    [7, 3, 5, 3],\n","    [2, 9, 8, 4],\n","    [3, 4, 2, 5]\n","]\n","\n","num_rows = len(matrix1)\n","num_colms = len(matrix1[0])\n","\n","matrix = [[0 for _ in range(num_rows)] for _ in range(num_colms)]\n","\n","\n","for i in range(num_rows):\n","    for j in range(num_colms):\n","        matrix[j][i] = matrix1[i][j]\n","\n","\n","for row in matrix:\n","    print(row)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xrb2BZAt6NiO","executionInfo":{"status":"ok","timestamp":1698826019238,"user_tz":-330,"elapsed":13,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"bd423dcf-0b16-4ee8-d652-fd0bad29260f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[2, 7, 2, 3]\n","[3, 3, 9, 4]\n","[4, 5, 8, 2]\n","[5, 3, 4, 5]\n"]}]},{"cell_type":"code","source":["\"\"\"Create a python program to do the following.\n","i) Create a list list1 =[\"100\", \"200\", \"300\", \"400\", \"500\"]\n","\n","ii) Create the reverse of list1 and store to list2\n","\n","iii) Create a list list3=['100500', '200400', '300300', '400200', '500100'] and print\n"," \"\"\"\n","\n","list1=[\"100\", \"200\", \"300\", \"400\", \"500\"]\n","list2=list1[::-1]\n","list3=['100500', '200400', '300300', '400200', '500100']\n","print(list2, list3)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MNLJaMoo6RBa","executionInfo":{"status":"ok","timestamp":1698826019239,"user_tz":-330,"elapsed":12,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"94a206a2-1ff0-4bf2-838e-505837a99348"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['500', '400', '300', '200', '100'] ['100500', '200400', '300300', '400200', '500100']\n"]}]},{"cell_type":"code","source":["def mergeSort(array, smaller_count):\n","    if len(array) > 1:\n","        r = len(array)//2\n","        L = array[:r]\n","        M = array[r:]\n","\n","        mergeSort(L, smaller_count)\n","        mergeSort(M, smaller_count)\n","\n","        i = j = k = 0\n","\n","        while i < len(L) and j < len(M):\n","            if L[i] < M[j]:\n","                array[k] = L[i]\n","                smaller_count[L[i][1]] += j  # Count smaller numbers for the element L[i]\n","                i += 1\n","            else:\n","                array[k] = M[j]\n","                j += 1\n","            k += 1\n","\n","        while i < len(L):\n","            array[k] = L[i]\n","            smaller_count[L[i][1]] += j  # Count smaller numbers for the remaining elements in L\n","            i += 1\n","            k += 1\n","\n","        while j < len(M):\n","            array[k] = M[j]\n","            j += 1\n","            k += 1\n","\n","\n","def countSmallerNumbers(nums):\n","    n = len(nums)\n","    result = [0] * n  # Initialize an array to store the count of smaller numbers\n","    nums = list(enumerate(nums))  # Enumerate the input array to keep track of the original indices\n","    mergeSort(nums, result)\n","\n","    return result\n","\n","\n","# Driver program\n","if __name__ == '__main__':\n","    array = [7, 4, 8, 6]\n","\n","    smaller_count = countSmallerNumbers(array)\n","\n","    print(\"Count of smaller numbers to the right of each element is:\")\n","    printList(smaller_count)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"id":"sy5-3T8Dh5-q","executionInfo":{"status":"error","timestamp":1699893239509,"user_tz":-330,"elapsed":21,"user":{"displayName":"Himanshu","userId":"01692979060989472914"}},"outputId":"35332cb8-2468-4c8e-aa98-3ac8a8ba2f12"},"execution_count":1,"outputs":[{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-4d96e7c8e457>\u001b[0m in \u001b[0;36m<cell line: 44>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     45\u001b[0m     \u001b[0marray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m7\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m4\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m8\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     46\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 47\u001b[0;31m     \u001b[0msmaller_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcountSmallerNumbers\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     48\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Count of smaller numbers to the right of each element is:\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-1-4d96e7c8e457>\u001b[0m in \u001b[0;36mcountSmallerNumbers\u001b[0;34m(nums)\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mn\u001b[0m  \u001b[0;31m# Initialize an array to store the count of smaller numbers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[0mnums\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnums\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Enumerate the input array to keep track of the original indices\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 38\u001b[0;31m     \u001b[0mmergeSort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnums\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-1-4d96e7c8e457>\u001b[0m in \u001b[0;36mmergeSort\u001b[0;34m(array, smaller_count)\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mM\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0marray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m         \u001b[0mmergeSort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmaller_count\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      8\u001b[0m         \u001b[0mmergeSort\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msmaller_count\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-1-4d96e7c8e457>\u001b[0m in \u001b[0;36mmergeSort\u001b[0;34m(array, smaller_count)\u001b[0m\n\u001b[1;32m     13\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mM\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m                 \u001b[0marray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mk\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m                 \u001b[0msmaller_count\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mj\u001b[0m  \u001b[0;31m# Count smaller numbers for the element L[i]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m                 \u001b[0mi\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}]}]}